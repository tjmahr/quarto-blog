---
title: "playing with quatro"
description: "this is STILL in beta"
date: "2023-07-02"
date-modified: "`r format(Sys.Date())`"
categories: [meta, dev]
---

This is the **not** first post in a Quarto blog. Welcome!

![](thumbnail.jpg)

- [ ] I want a banner image on top like the old site with a credit to the source.

- [x] I had to put `fig-width: 8` under `format > html` in `_quarto.yml`. I also pushed other knitr options here: 

```
    fig-asp: 0.618
    fig-dpi: 300
    fig-align: "center"
    fig-cap-location: "margin"
```

- [ ] I am not sure how to replicate the `out.width` knitr option.
- [ ] I want to use targets instead of freeze.
- [x] I need old URLs to redirect. Use `aliases: [""]` in header.

I got to opt into `fig-cap-location: "margin"`.

I had to remove the old knitr _cached stuff. Still need a different solution.

I don't want the green links. If I set the link color, that still leaves the green 
link color in the table of contents.


- [x] I want a slightly larger font size. Set `fontsize: 1.1em` in _quarto.yml

- [x] All of my old manual downlit attempts are styled differently than actual downlit urls. Added a check.

- [x] I want underlined downlit links. Done by adding a new css file.

I have to convert fig.alt and fig.cap to here.

```
#| fig-alt: "Examples of `plot_dist()`"
#| fig-cap:
```


It's configuration. Lots of configuration.

- project level
- directory level
- post-level yaml

## file locations

My Jekyll blog had the following, very simplified, high-level structure.

```
.
├── 📁 _R 
│   ├── 📁 _drafts
│   ├── 📄 2023-07-03-bayesian-ordering-constraint.Rmd
│   └── [other .Rmd files]
├── 📁 _posts
│   ├── 📄 2023-07-03-bayesian-ordering-constraint.md
│   └── [other .md files]
├── 📁 _drafts
├── 📁 _site
│   ├── 📁 bayesian-ordering-constraint
│   │   └── 📄 index.html
│   ├── [other directories for each post]
|   └── 📄 index.html
└── 📁 assets
|   ├── 📁 css
|   ├── 📁 images
|   |   ├── 🌅 2023-07-ruins-1280.jpg
|   |   └── [other images for each post]
|   └── 📁 js
└── 📄 _targets.R
```

Where the workflow is:

  - I write the post as .Rmd file in the `_R` folder.
  - I have [targets](https://docs.ropensci.org/targets/) (`_targets.R`)
    check the .Rmd files for changes and run knitr on any that have
    changed, creating the .md file in the `_posts` folder. (targets also
    spell-checks all of the files on each run.)
  - I push the .md files to GitHub, and it runs Jekyll to produce the
    folders and .html files in the `_site` folder and serve the `_site`
    folder to visitors.

If I want to include any non-figure images, I have to store them in
`assets/images`. If want to develop a draft, I have to keep it in a
separate workflow. (If an .md file ends up in `_posts`, it is
published.) Finally, the date in the filename is significant. It sets
the "date published" for the post, and the date is later stripped off
for the final address of the post in the published site.

Here is the parallel set up in my Quarto site:

```
.
├── 📁 posts 
│   ├── 📁 2023-07-03-bayesian-ordering-constraint
│   |   ├── 🌅 2023-07-ruins-1280.jpg
│   |   └── 📄 index.qmd
│   ├── [other directories for each post]
│   └── 📄 _metadata.yml
├── 📁 docs
│   ├── 📁 posts
|   │   ├── 📁 2023-07-03-bayesian-ordering-constraint
|   │   |   ├── 🌅 2023-07-ruins-1280.jpg
|   │   |   └── 📄 index.html
|   |   └── [other directories for each post]
│   └── 📄 index.html
└── 📄 _quarto.yml
```

Here, Quarto runs the .qmd -\> .md -\> .html pipeline, and the `docs`
folder is published as-is as the website on GitHub.

Look at how much simpler this is layout is. Notably:

  - The `_drafts` folder business is gone, because we use document
    metadata data (set `draft: true` in the YAML header) to indicate [draft
    status](https://quarto.org/docs/websites/website-blog.html#drafts).
  - Assets for individual posts are stored alongside the post in the post
    directory.
    
Here, the date in the filename is not significant to Quarto; it helps me
out because I want my posts to be sorted in chronological order by date
published. In order to set the date for a post, I have to set `date:
"2023-07-03"` in the document's YAML header.

### broken URLs and redirects

The addresses created by Jekyll did not include the date:
`bayesian-ordering-constraint/index.html`. But in Quarto, the folder
name carries over to the site:
`posts/2023-07-03-bayesian-ordering-constraint/index.html`. I am not
sure how to get Quarto to automatically change output folder names, and
this sucks because any pre-existing links to my posts now point to
broken URLS. 

Fortunately, document metadata can help us here by letting us create an
alias for the post:

```yaml
aliases:
  - "/bayesian-ordering-constraint/"
```

Quarto will create a simple page at
`/bayesian-ordering-constraint/index.html` that will redirect to the
proper URL. 


## the bare minimum for migrating a post

To migrate a single post, we need to do the following steps:

1.  Download the .Rmd file from `_R/[post-date-and-filename].Rmd` and
    save it to `posts/[post-date-and-filename]/index.qmd`.
2.  Download any assets referenced in the .Rmd file to
    `posts/[post-date-and-filename]` and update the locations in the
    .qmd file accordingly.
3. Migrate YAML metadata.



## other notes

### downlit links

My favorite feature of the quarto style is the downlit links, where I R
code is automatically linked to documentation. This piece of code
`stats::lm()` is linked, and I didn't have to do anything! In my old
blog, I would replicate this style by manually adding links or using
`downlit::autolink()` to create links for me. But the links added by
downlit and those done by hand have a differently style in the rendered
document:

- `stats::lm()` linked by downlit
- [`stats::lm()`](https://rdrr.io/r/stats/lm.html) linked manually

This link inconsistency is annoying, so it became one of my automatic checks.

When I was working on this post, I couldn't get the above demonstration
to work. downlit appeared not to process the file *unless* the file had
an explicit R code block in it which was mystifying!

By default, the downlit links are not underlined, so I created a file
called `downlit-underline.css` and added it to `_quarto.yml`. This css
is something I had copy-pasted for use in my rmarkdown notebooks, and I
have forgetten where I originally found it. I have included it as a
comment.

```css
code a:any-link {
  color: inherit; /* use colour from syntax highlighting */
  text-decoration: underline;
  text-decoration-color: #ccc;
}
```

```yaml
format:
  html:
    css:
      - downlit-underline.css
```















{{< include ../_footer.Rmd >}}
